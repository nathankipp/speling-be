[{"/Users/nathankipp/Projects/speling-be/src/index.js":"1","/Users/nathankipp/Projects/speling-be/src/App.js":"2","/Users/nathankipp/Projects/speling-be/src/reportWebVitals.js":"3","/Users/nathankipp/Projects/speling-be/src/Spelling/index.js":"4","/Users/nathankipp/Projects/speling-be/src/Mathing/index.js":"5","/Users/nathankipp/Projects/speling-be/src/Spelling/1g-words.js":"6"},{"size":535,"mtime":1668037274532,"results":"7","hashOfConfig":"8"},{"size":853,"mtime":1668565886225,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1668037274533,"results":"10","hashOfConfig":"8"},{"size":7311,"mtime":1668900386587,"results":"11","hashOfConfig":"8"},{"size":4968,"mtime":1669233401264,"results":"12","hashOfConfig":"8"},{"size":684,"mtime":1668900742920,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"mcnu1t",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/nathankipp/Projects/speling-be/src/index.js",[],["28","29"],"/Users/nathankipp/Projects/speling-be/src/App.js",[],"/Users/nathankipp/Projects/speling-be/src/reportWebVitals.js",[],"/Users/nathankipp/Projects/speling-be/src/Spelling/index.js",["30"],"import React from 'react';\nimport uniq from  'lodash/uniq';\nimport difference from 'lodash/difference';\nimport words from './1g-words';\n\nconst AZ = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\nconst STORAGE_KEYS = {\n  high: 'speling-be',\n  spelled: 'spelled',\n  spoken: 'spoken',\n};\n\nconst INITIAL_STATE = {\n  step: 0,\n  score: 0,\n  word: undefined,\n  choices: [],\n  ans: '',\n  high: 0,\n  mode: STORAGE_KEYS.spelled,\n  spelled: [],\n  spoken: [],\n};\n\nconst getWord = (completed = []) => {\n  const remainingWords = difference(words, completed);\n  if (remainingWords.length === 0) {\n    return '';\n  }\n  const idx = Math.floor(Math.random() * remainingWords.length);\n  return remainingWords[idx];\n}\n\nconst scoreBoard = (score, high) => (\n  <div className=\"score\">\n    <div>Score: {score}</div>\n    <div>High: {high}</div>\n  </div>\n);\n\nconst playButton = (ref) => (\n  <button className=\"play\" onClick={() => {\n    ref.current.currentTime = 0;\n    ref.current.play();\n  }}> &#128266; </button>\n);\n\nconst getViews = (state, props) => ({\n  start: (start, reset) => {\n    const { score, high, spelled, spoken } = state;\n    return (\n      <div className=\"app go\">\n        {scoreBoard(score, high)}\n        <div>\n          <div>Get ready to spell!</div>\n          <div className=\"status\">There are {words.length} words</div>\n          <div className=\"status\">\n            {difference(words, spelled).length} left to read & spell\n          </div>\n          <div className=\"status\">\n            {difference(words, spoken).length} left to hear & spell\n          </div>\n          <button className=\"reset\" onClick={reset}>Reset</button>\n          <button className=\"quit\" onClick={props.quit}>Quit</button>\n        </div>\n        <div>\n          <button className=\"go\" onClick={start}>Go</button>\n        </div>\n      </div>\n    );\n  },\n  read: () => {\n    const { score, high, word, countdown } = state;\n    return (\n      <div className=\"app read\">\n        {scoreBoard(score, high)}\n        <div>{word}</div>\n        <div>{countdown}</div>\n      </div>\n    );\n  },\n  spell: (audioRef, print, remove, giveUp) => {\n    const { word, mode, score, high, choices, ans } = state;\n    const fileName = word.toLowerCase().replace(/\\W/g, '');\n    return (\n      <div className=\"app spell\">\n        <audio ref={audioRef} src={`${process.env.PUBLIC_URL}/audio/${fileName}.m4a`} autoPlay={mode === STORAGE_KEYS.spoken} />\n        {scoreBoard(score, high)}\n        <div>&nbsp;{ans || playButton(audioRef)}&nbsp;</div>\n        <div className=\"keyboard\">\n          {choices.sort().map(letter => (\n            <button key={letter} onClick={() => print(letter)}>{letter}</button>\n          ))}\n          <button className=\"remove\" onClick={remove}> &larr; </button>\n          {playButton(audioRef)}\n          <button className=\"give-up\" onClick={() => {\n            if (window.confirm(\"Give up?\")) { giveUp(); }\n          }}> &#128534; </button>\n        </div>\n      </div>\n    );\n  },\n  yes: () => {\n    const { score, high, ans } = state;\n    return (\n      <div className=\"app yes\">\n        {scoreBoard(score, high)}\n        <div>{ans}</div>\n        <div>Yes!!!</div>\n      </div>\n    )\n  },\n  done: (reset) => {\n    const { score, high } = state;\n    return (\n      <div className=\"app winner\">\n        {scoreBoard(score, high)}\n        <div>&#129321;</div>\n        <div>All done!</div>\n        <button className=\"reset\" onClick={reset}>Play again</button>\n      </div>\n    );\n  },\n});\n\nclass Spelling extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = INITIAL_STATE;\n    this.audioRef = React.createRef();\n  }\n\n  update(newState, cb = () => {}) {\n    this.setState(prevState => ({\n      ...prevState,\n      ...newState,\n    }), cb);\n  }\n\n  componentDidMount() {\n    const high = window.localStorage?.getItem(STORAGE_KEYS.high) || 0;\n    if (high === null) {\n      window.localStorage.setItem(STORAGE_KEYS.high, 0);\n    }\n\n    let spelled = window.localStorage?.getItem(STORAGE_KEYS.spelled);\n    try {\n      spelled = JSON.parse(spelled).map(x => x);\n    } catch(e) {\n      spelled = [];\n    }\n\n    let spoken = window.localStorage?.getItem(STORAGE_KEYS.spoken);\n    try {\n      spoken = JSON.parse(spelled).map(x => x);\n    } catch(e) {\n      spoken = [];\n    }\n\n    const step = difference(words, uniq([...spelled, ...spoken])).length === 0\n      ? 4 // winner\n      : INITIAL_STATE.step;\n\n    this.update({ step, high, spelled, spoken });\n  }\n\n  spell = () => {\n    const { word } = this.state;\n    const choices = uniq(word.split(''));\n    while (choices.length < 15) {\n      const idx = Math.floor(Math.random() * 26);\n      const letter = AZ[idx];\n      if (!choices.includes(letter)) {\n        choices.push(letter);\n      }\n    }\n\n    this.update({ step: 2, choices });\n  }\n\n  print = (char) => {\n    let { ans, word, score, high, mode, spelled, spoken } = this.state;\n    const guess = ans.concat(char);\n    const step = guess === word ? 3 : 2;\n\n    if (step === 3) {\n      score = score + 1;\n      high = score > high ? score : high;\n      window.localStorage.setItem(STORAGE_KEYS.high, high);\n\n      if (mode === STORAGE_KEYS.spelled) {\n        spelled = [...spelled, word];\n        window.localStorage.setItem(STORAGE_KEYS.spelled, JSON.stringify(spelled));\n      } else {\n        spoken = [...spoken, word];\n        window.localStorage.setItem(STORAGE_KEYS.spoken, JSON.stringify(spoken));\n      }\n\n      const update = () => this.update(\n        { score, high, spelled, spoken },\n        () => this.start(false)\n      );\n      setTimeout(update, 2000);\n    }\n\n    this.update({ ans: guess, step });\n  }\n\n  remove = () => {\n    const { ans } = this.state;\n    this.update({ ans: ans.replace(/.$/, '') });\n  }\n\n  giveUp = () => {\n    const { score, high, spelled } = this.state;\n    this.update({ ...INITIAL_STATE, score, high, spelled });\n  }\n\n  start = (resetScore = true) => {\n    const { spelled, spoken } = this.state;\n\n    const spell = getWord(spelled);\n    const speak = getWord(spoken);\n    const step = spell ? 1 : speak ? 2 : 4;\n    const newState = {\n      step,\n      mode: spell ? STORAGE_KEYS.spelled : STORAGE_KEYS.spoken,\n      word: spell || speak,\n      ans: '',\n      countdown: 3\n    }\n    if (resetScore) {\n      newState.score = 0;\n    }\n\n    const cb = spell\n        ? () => {\n          setTimeout(() => this.update({ countdown: 2 }), 1000);\n          setTimeout(() => this.update({ countdown: 1 }), 2000);\n          setTimeout(() => this.spell(), 3000);\n        }\n        : () => this.spell();\n    this.update(newState, step < 4 ? cb : undefined);\n  }\n\n  reset = () => {\n    if (window.confirm(\"Reset words and high score?\")) {\n      window.localStorage.setItem(STORAGE_KEYS.high, 0);\n      window.localStorage.setItem(STORAGE_KEYS.spelled, '[]');\n      window.localStorage.setItem(STORAGE_KEYS.spoken, '[]');\n      this.update({ high: 0, spelled: [], spoken: [] });\n    }\n  };\n\n  render() {\n    const { start, read, spell, yes, done } = getViews(this.state, this.props);\n    switch(this.state.step) {\n      case 0: return start(this.start, this.reset);\n      case 1: return read();\n      case 2: return spell(this.audioRef, this.print, this.remove, this.giveUp);\n      case 3: return yes();\n      case 4: return done(this.reset);\n    }\n  }\n}\n\nexport default Spelling;\n","/Users/nathankipp/Projects/speling-be/src/Mathing/index.js",["31"],"/Users/nathankipp/Projects/speling-be/src/Spelling/1g-words.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":258,"column":5,"nodeType":"38","messageId":"39","endLine":264,"endColumn":6},{"ruleId":"36","severity":1,"message":"37","line":196,"column":5,"nodeType":"38","messageId":"39","endLine":201,"endColumn":6},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]